{
	"info": {
		"_postman_id": "3cce3fe0-726d-4b46-a02e-6ccff0a2bb37",
		"name": "Post_Lesson_4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24262954"
	},
	"item": [
		{
			"name": "GetPostList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check body data is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].link is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].link).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].image is string\", function () {\r",
							"    pm.expect(jsonData.data[0].image).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].likes is number\", function () {\r",
							"    pm.expect(jsonData.data[0].likes).to.be.an('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].tags is array\", function () {\r",
							"    pm.expect(jsonData.data[0].tags).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].tags[0] is string\", function () {\r",
							"    pm.expect(jsonData.data[0].tags[0]).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].text is string\", function () {\r",
							"    pm.expect(jsonData.data[0].text).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].publishDate is string\", function () {\r",
							"    pm.expect(jsonData.data[0].publishDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.data[0].updatedDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner is Object\", function () {\r",
							"    pm.expect(jsonData.data[0].owner).to.be.an('Object')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.title is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.title).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.firstName is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.firstName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.lastName is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.lastName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.picture is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.picture).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.gender is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.gender).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.email is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.email).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.dateOfBirth is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.dateOfBirth).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.phone is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.phone).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.location is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.location).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.registerDate is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.registerDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.updatedDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[19].id is string\", function () {\r",
							"    pm.expect(jsonData.data[19].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[20] is undefined\", function () {\r",
							"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"//console.log(jsonData.data[20]);\r",
							"\r",
							"pm.test(\"Check limit equals 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});\r",
							"\r",
							"pm.test(\"Check page equals 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number')\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/post",
					"host": [
						"{{host}}"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetListByUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Check body data is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].link is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].link).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].image is string\", function () {\r",
							"    pm.expect(jsonData.data[0].image).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].likes is number\", function () {\r",
							"    pm.expect(jsonData.data[0].likes).to.be.an('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].tags is array\", function () {\r",
							"    pm.expect(jsonData.data[0].tags).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].tags[0] is string\", function () {\r",
							"    pm.expect(jsonData.data[0].tags[0]).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].text is string\", function () {\r",
							"    pm.expect(jsonData.data[0].text).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].publishDate is string\", function () {\r",
							"    pm.expect(jsonData.data[0].publishDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.data[0].updatedDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner is Object\", function () {\r",
							"    pm.expect(jsonData.data[0].owner).to.be.an('Object')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.title is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.title).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.firstName is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.firstName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.lastName is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.lastName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.picture is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.picture).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.gender is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.gender).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.email is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.email).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.dateOfBirth is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.dateOfBirth).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.phone is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.phone).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.location is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.location).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.registerDate is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.registerDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.updatedDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[20] is undefined\", function () {\r",
							"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check page equals 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check limit equals 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/user/670909db271e4e0bfd3305cf/post",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"670909db271e4e0bfd3305cf",
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetListByTag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Check body data is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].link is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].link).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].image is string\", function () {\r",
							"    pm.expect(jsonData.data[0].image).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].likes is number\", function () {\r",
							"    pm.expect(jsonData.data[0].likes).to.be.an('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].tags is array\", function () {\r",
							"    pm.expect(jsonData.data[0].tags).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].tags[0] is string\", function () {\r",
							"    pm.expect(jsonData.data[0].tags[0]).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Сheck body data[0].tags include tag\", function () {\r",
							"    pm.expect(jsonData.data[0].tags).to.include('april')\r",
							"});\r",
							"\r",
							"//console.log(jsonData.data[0].tags);\r",
							"\r",
							"/* \r",
							"pm.test(\"Сheck body data.tags include tag\", function () {\r",
							"    pm.expect(jsonData.data.tags).to.have.property('tags','april')\r",
							"});\r",
							"*/\r",
							"\r",
							"pm.test(\"Check body data[0].text is string\", function () {\r",
							"    pm.expect(jsonData.data[0].text).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].publishDate is string\", function () {\r",
							"    pm.expect(jsonData.data[0].publishDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.data[0].updatedDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner is Object\", function () {\r",
							"    pm.expect(jsonData.data[0].owner).to.be.an('Object')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.title is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.title).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.firstName is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.firstName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.lastName is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.lastName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.picture is string\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.picture).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.gender is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.gender).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.email is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.email).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.dateOfBirth is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.dateOfBirth).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.phone is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.phone).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.location is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.location).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.registerDate is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.registerDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].owner.updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].owner.updatedDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"/*\r",
							"pm.test(\"Сheck body data.owner have property id\", function () {\r",
							"    pm.expect(jsonData.data.owner.id).to.have.property('id','670909db271e4e0bfd3305cf')\r",
							"});\r",
							"*/\r",
							"\r",
							"pm.test(\"Check body data[20] is undefined\", function () {\r",
							"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check page equals 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check limit equals 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/tag/{{tag}}/post",
					"host": [
						"{{host}}"
					],
					"path": [
						"tag",
						"{{tag}}",
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreatePost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"pm.collectionVariables.set(\"publishDate\", jsonData.publishDate);\r",
							"pm.collectionVariables.set(\"updatedDate\", jsonData.updatedDate);\r",
							"\r",
							"\r",
							"pm.test(\"Check body data is not array\", function () {\r",
							"    pm.expect(jsonData).to.be.not.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link is string\", function () {\r",
							"    pm.expect(jsonData.link).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image is string\", function () {\r",
							"    pm.expect(jsonData.image).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.eql(\"https://demotions.ru/uploads/posts/2018-06/1529031714_Vagonchik-tronetsya-_demotions.ru.jpg\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes is number\", function () {\r",
							"    pm.expect(jsonData.likes).to.be.an('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags is array\", function () {\r",
							"    pm.expect(jsonData.tags).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags[0] is string\", function () {\r",
							"    pm.expect(jsonData.tags[0]).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text is string\", function () {\r",
							"    pm.expect(jsonData.text).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(\"Queen rules\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.eql(pm.collectionVariables.get(\"publishDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.eql(pm.collectionVariables.get(\"updatedDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner is Object\", function () {\r",
							"    pm.expect(jsonData.owner).to.be.an('Object')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id is string\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.eql(\"670909db271e4e0bfd3305cf\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title is string\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"mr\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName is string\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.eql(\"Wilhelmine\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName is string\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.eql(\"Mraz\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture is string\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.eql(\"http://placeimg.com/640/480\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.gender is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.gender).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.email is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.email).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.dateOfBirth is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.dateOfBirth).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.phone is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.phone).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.location is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.location).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.registerDate is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.registerDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.updatedDate).to.be.an('undefined')\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Queen rules\",\r\n    \"image\": \"https://demotions.ru/uploads/posts/2018-06/1529031714_Vagonchik-tronetsya-_demotions.ru.jpg\",\r\n    \"likes\": 0,\r\n    \"tags\": [\r\n                \"mart\",\r\n                \"april\",\r\n                \"show must go on\"\r\n            ],\r\n    \"owner\": \"670909db271e4e0bfd3305cf\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/post/create",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPostById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check body data is not array\", function () {\r",
							"    pm.expect(jsonData).to.be.not.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link is string\", function () {\r",
							"    pm.expect(jsonData.link).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image is string\", function () {\r",
							"    pm.expect(jsonData.image).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.eql(\"https://demotions.ru/uploads/posts/2018-06/1529031714_Vagonchik-tronetsya-_demotions.ru.jpg\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes is number\", function () {\r",
							"    pm.expect(jsonData.likes).to.be.an('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags is array\", function () {\r",
							"    pm.expect(jsonData.tags).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags[0] is string\", function () {\r",
							"    pm.expect(jsonData.tags[0]).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text is string\", function () {\r",
							"    pm.expect(jsonData.text).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(\"Queen rules\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.eql(pm.collectionVariables.get(\"publishDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.eql(pm.collectionVariables.get(\"updatedDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner is Object\", function () {\r",
							"    pm.expect(jsonData.owner).to.be.an('Object')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id is string\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.eql(\"670909db271e4e0bfd3305cf\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title is string\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"mr\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName is string\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.eql(\"Wilhelmine\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName is string\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.eql(\"Mraz\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture is string\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.eql(\"http://placeimg.com/640/480\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.gender is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.gender).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.email is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.email).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.dateOfBirth is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.dateOfBirth).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.phone is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.phone).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.location is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.location).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.registerDate is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.registerDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.updatedDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"//console.log(jsonData.data[20]);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/post/{{postId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"pm.collectionVariables.set(\"publishDate\", jsonData.publishDate);\r",
							"pm.collectionVariables.set(\"updatedDate\", jsonData.updatedDate);\r",
							"pm.collectionVariables.set(\"text\", jsonData.text);\r",
							"\r",
							"pm.test(\"Check body data is not array\", function () {\r",
							"    pm.expect(jsonData).to.be.not.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link is string\", function () {\r",
							"    pm.expect(jsonData.link).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image is string\", function () {\r",
							"    pm.expect(jsonData.image).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.eql(\"https://demotions.ru/uploads/posts/2018-06/1529031714_Vagonchik-tronetsya-_demotions.ru.jpg\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes is number\", function () {\r",
							"    pm.expect(jsonData.likes).to.be.an('number')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags is array\", function () {\r",
							"    pm.expect(jsonData.tags).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags[0] is string\", function () {\r",
							"    pm.expect(jsonData.tags[0]).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text is string\", function () {\r",
							"    pm.expect(jsonData.text).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(pm.collectionVariables.get(\"text\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.eql(pm.collectionVariables.get(\"publishDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.eql(pm.collectionVariables.get(\"updatedDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner is Object\", function () {\r",
							"    pm.expect(jsonData.owner).to.be.an('Object')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id is string\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.eql(\"670909db271e4e0bfd3305cf\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title is string\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"mr\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName is string\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.eql(\"Wilhelmine\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName is string\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.eql(\"Mraz\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture is string\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.eql(\"http://placeimg.com/640/480\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.gender is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.gender).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.email is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.email).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.dateOfBirth is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.dateOfBirth).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.phone is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.phone).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.location is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.location).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.registerDate is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.registerDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.owner.updatedDate).to.be.an('undefined')\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Queen do not rule\",\r\n    \"image\": \"https://demotions.ru/uploads/posts/2018-06/1529031714_Vagonchik-tronetsya-_demotions.ru.jpg\",\r\n    \"likes\": 0,\r\n    \"tags\": [\r\n                \"mart\",\r\n                \"april\",\r\n                \"show must not go on\"\r\n            ],\r\n    \"owner\": \"670909db271e4e0bfd3305cf\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/post/{{postId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Check body data is not array\", function () {\r",
							"    pm.expect(jsonData).to.be.not.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link is undefined\", function () {\r",
							"    pm.expect(jsonData.link).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image is undefined\", function () {\r",
							"    pm.expect(jsonData.image).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes is undefined\", function () {\r",
							"    pm.expect(jsonData.likes).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags is undefined\", function () {\r",
							"    pm.expect(jsonData.tags).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text is undefined\", function () {\r",
							"    pm.expect(jsonData.text).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is undefined\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is undefined\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner is undefined\", function () {\r",
							"    pm.expect(jsonData.owner).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id equal to postId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/post/{{postId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"{{postId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{app-id}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "app-id",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tag",
			"value": "april",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "",
			"type": "string"
		},
		{
			"key": "publishDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "updatedDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "text",
			"value": ""
		}
	]
}